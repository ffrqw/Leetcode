public class Solution {
    public int maxProfit(int[] prices) {
        /*
        still use dp
        but this time the state transfer eqn is diff
        sells[i] = max(buys[i - 1] + prices[i], sells[i - 1] + delta) 
        buys[i] = max(sells[i - 2] - prices[i], buys[i - 1] - delta)
        第i天卖出的最大累积收益 = max(第i-1天买入~第i天卖出的最大累积收益, 第i-1天卖出后反悔~改为第i天卖出的最大累积收益)
        第i天买入的最大累积收益 = max(第i-2天卖出~第i天买入的最大累积收益, 第i-1天买入后反悔~改为第i天买入的最大累积收益)
        */
        // time n
        // space 2n
        
        // ps: this need to be memorized
        
        if(prices.length<=1) return 0;
        
        int[] buys = new int[prices.length];
        int[] sells = new int[prices.length];
        
        // base case
        buys[0] = -prices[0];
        sells[0] = 0;
        buys[1] = -prices[1];
        sells[1] = Math.max(0,prices[1]-prices[0]);
        
        int max = sells[1];
        
        for(int i = 2;i<prices.length;i++)
        {
            int d = prices[i]-prices[i-1];
            sells[i] = Math.max(buys[i-1]+prices[i], sells[i-1] + d);
            buys[i] = Math.max(sells[i-2]-prices[i], buys[i-1]-d);
            max = Math.max(sells[i],max);
        }
        return max;
    }
}
