/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        // use queue to implement level traverse
        // use a lvlnum to record the num of nodes in this level
        // enqueue the children of the dequeue node
        // after dequeue lvlnum nodes in the queue,
        // record the size of the queue as lvlnum
        // use a list to record each level's ans
        
        // time n
        // space n
        List<List<Integer>> res = new LinkedList<>();
        
        if(root==null)return res;
        Queue<TreeNode> q = new LinkedList<>();
        
        int lvlnum = 1;
        q.offer(root);
        while(!q.isEmpty())
        {
            // record the list of the level
            List<Integer> list = new LinkedList<>();
            for(int i = 0;i<lvlnum;i++)
            {
                TreeNode p = q.poll();
                // visit p
                list.add(p.val);
                
                if(p.left!=null)
                    q.offer(p.left);
                if(p.right!=null)
                    q.offer(p.right);
            }
            lvlnum = q.size();
            res.add(list);
        }
        return res;
    }
}
