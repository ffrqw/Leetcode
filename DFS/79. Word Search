public class Solution {
    public boolean exist(char[][] board, String word) {
        
        if(board.length==0)return false;
        boolean flag = false;
        for(int i = 0;i<board.length;i++)
            for(int j= 0;j<board[0].length;j++)
            {
                if(board[i][j]==word.charAt(0))
                    flag = dfs(board,i,j,word,1);
                if(flag==true) return true;
            }
        return false;
    }
    public boolean dfs(char[][] board, int i, int j, String word, int l){
        
        // leaf
        if(word.length()==l)return true;
        
        char tmp = board[i][j];
        // make read
        board[i][j]='0';
        
        boolean flag = false;
        // for every child
        if(i>0&&word.charAt(l)==board[i-1][j]){
            flag = dfs(board,i-1,j,word,l+1);                           // will board affect the next if's board?
            if(flag==true)return true;
        }
        if(j>0&&word.charAt(l)==board[i][j-1]){
            flag = dfs(board,i,j-1,word,l+1);
            if(flag==true)return true;
        }
        if(i<board.length-1&&word.charAt(l)==board[i+1][j]){
            flag = dfs(board,i+1,j,word,l+1);
            if(flag==true)return true;
        }
        if(j<board[0].length-1&&word.charAt(l)==board[i][j+1]){
            flag = dfs(board,i,j+1,word,l+1);
            if(flag==true)return true;
        }
        board[i][j]=tmp;                                                // why this recover neccessary?
        return false;    
    }
}
