/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class Solution {
    public int depthSum(List<NestedInteger> nestedList) {
        
        // base case
        if(nestedList.size()==0)return 0;
        
        int sum = 0;
        for(NestedInteger i:nestedList)
            sum+=dfs(i, 1);
        return sum;
    }
    
    public int dfs(NestedInteger ni, int dep){
        
        // base case
        if(ni.isInteger())return (ni.getInteger()*dep);
        
        // simplifier
        // it holds a nestedList
        int sum = 0;
        for(NestedInteger i: ni.getList())
        {
            sum+=dfs(i,dep+1);
        }
        return sum;
    }
}
