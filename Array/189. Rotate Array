public class Solution {
    /*public void rotate(int[] nums, int k) {
        
        k = k%nums.length;              // in case k larger than length
        if(k==0||nums.length==1)return;
        
        // use reverse 3 times
        // 1234567
        // 7654321
        // 567 1234
        
        // time:O(N/2)/ reverse, so total O(N)
        // space: no extra space
        reverse(nums,0,nums.length-1);
        //print(nums);
        reverse(nums,0,k-1);
        //print(nums);
        reverse(nums,k,nums.length-1);
        //print(nums);
    }
    public void reverse(int[] nums, int s, int e){
        // reverse from s to e
        int i = s;
        int j = e;
                                            //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                            //!!!!!!! use examples to find if '=' exist!!!!!
        for(;i<=(e+s)/2;i++)                //!!! the 2nd time write e-s!!! wrong!!!
        {
            swap(nums,i,j);
            j--;
        }
    }
    // now we need to pay attention that if swap and reverse can change the 
    // value in nums[]
    public void swap(int[] nums,int i, int j){
        
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
    
    public void print(int []nums){
        for(int num:nums)
        System.out.print(num);
        System.out.println();
    }*/
    
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Runtime: above   below
    //           3ms      1ms
    // the below is improved due to less calling functions
    
    public void rotate(int[] nums, int k) {
    k %= nums.length;
    reverse(nums, 0, nums.length - 1);
    reverse(nums, 0, k - 1);
    reverse(nums, k, nums.length - 1);
}

public void reverse(int[] nums, int start, int end) {
    while (start < end) {
        int temp = nums[start];
        nums[start] = nums[end];
        nums[end] = temp;
        start++;
        end--;
    }
}
}
